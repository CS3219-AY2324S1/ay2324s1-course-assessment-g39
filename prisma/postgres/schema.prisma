// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma-db-psql/client"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("POSTGRES_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  MAINTAINER
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CodeSpace {
  id          String       @default(cuid())
  userId      String
  code        String
  name        String       @default("")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeSession CodeSession?

  @@id([id, userId])
}

model CodeSession {
  // unique id for session sharing
  id              String                @id @unique @default(cuid())
  userId          String // the primary owner of the codeSession
  codeSpaceId     String                @unique
  codeSpace       CodeSpace             @relation(fields: [codeSpaceId, userId], references: [id, userId], onDelete: Cascade)
  codeSessionAuth CodeSessionUserAuth[]

  @@unique([codeSpaceId, userId]) // Can only have one code session per code space
}

// temporary auth to authorise other users
// many to many relation for session - users auth
model CodeSessionUserAuth {
  codeSessionId    String
  authorisedUserId String // the user the authorisation is for
  createdAt        DateTime    @default(now()) // to be updated on timeout
  authUser         User        @relation(name: "auth_receiver", fields: [authorisedUserId], references: [id], onDelete: Cascade)
  codeSession      CodeSession @relation(fields: [codeSessionId], references: [id], onDelete: Cascade)

  @@id([codeSessionId, authorisedUserId])
}

// todo: 
// model CodeChanges {

// }

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  sessions            Session[]
  codeSpace           CodeSpace[]
  role                Role                  @default(USER)
  codeSessionAuthRecv CodeSessionUserAuth[] @relation(name: "auth_receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MatchRequest {
  id         String @id
  replyTo    String @unique
  difficulty Int
  category   String
}
